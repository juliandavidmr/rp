/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[5,31,34,43,44,47,50,54,65,66,67],$V1=[1,11],$V2=[2,51],$V3=[1,10],$V4=[1,14],$V5=[1,15],$V6=[1,12],$V7=[1,16],$V8=[1,18],$V9=[1,19],$Va=[1,20],$Vb=[2,34],$Vc=[5,31,34,37,43,44,47,50,54,65,66,67],$Vd=[8,13,22,25,26,27,28,29,30,31],$Ve=[1,31],$Vf=[1,32],$Vg=[1,33],$Vh=[1,34],$Vi=[1,35],$Vj=[1,36],$Vk=[1,37],$Vl=[1,38],$Vm=[1,39],$Vn=[1,40],$Vo=[1,47],$Vp=[1,48],$Vq=[1,49],$Vr=[1,50],$Vs=[1,51],$Vt=[1,52],$Vu=[1,53],$Vv=[1,54],$Vw=[1,55],$Vx=[1,56],$Vy=[1,57],$Vz=[1,58],$VA=[1,59],$VB=[1,60],$VC=[1,61],$VD=[5,7,9,10,11,12,13,14,15,16,17,18,19,20,21,23,24,31,34,37,43,44,47,50,54,65,66,67],$VE=[5,7,13,14,15,16,17,18,19,20,23,24,31,34,37,43,44,47,50,54,65,66,67],$VF=[5,7,9,10,11,12,13,14,15,16,17,18,19,20,23,24,31,34,37,43,44,47,50,54,65,66,67],$VG=[5,7,13,23,24,31,34,37,43,44,47,50,54,65,66,67],$VH=[5,7,9,10,13,14,15,16,17,18,19,20,23,24,31,34,37,43,44,47,50,54,65,66,67],$VI=[5,7,13,14,15,23,24,31,34,37,43,44,47,50,54,65,66,67],$VJ=[1,96];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"expressions":3,"expressions_repetition0":4,"EOF":5,"e":6,"+":7,"NOT":8,"OR":9,"AND":10,"=":11,"<>":12,"-":13,"*":14,"/":15,">":16,"<":17,">=":18,"<=":19,"^":20,"DOT":21,"(":22,"PAR_CLOSE":23,"%":24,"TRUE":25,"FALSE":26,"NUMBER":27,"STRING":28,"E":29,"PI":30,"ID":31,"FUNCTION":32,"FUNCTION_option0":33,"DEF":34,"FUNCTION_option1":35,"FUNCTION_repetition0":36,"END":37,"SENTENCE":38,"VAR_ASSIGN":39,"CONDITION":40,"ECHO":41,"DEFCLASS":42,"COMMENT":43,"PRINTLN":44,"ECHO_option0":45,"ECHO_option1":46,"PRINT":47,"ECHO_option2":48,"ECHO_option3":49,"IF":50,"CONDITION_option0":51,"CONDITION_option1":52,"CONDITION_repetition0":53,"CLASS":54,"ID[classname]":55,"DEFCLASS_option0":56,"name_extended":57,"sentence":58,"EQUAL":59,"UNARY_OPERATOR":60,"&":61,"~":62,"!":63,"PRIVACITY":64,"PUBLIC":65,"PRIVATE":66,"PROTECTED":67,"PAR_OPEN":68,"COLON":69,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"+",8:"NOT",9:"OR",10:"AND",11:"=",12:"<>",13:"-",14:"*",15:"/",16:">",17:"<",18:">=",19:"<=",20:"^",21:"DOT",22:"(",23:"PAR_CLOSE",24:"%",25:"TRUE",26:"FALSE",27:"NUMBER",28:"STRING",29:"E",30:"PI",31:"ID",34:"DEF",37:"END",43:"COMMENT",44:"PRINTLN",47:"PRINT",50:"IF",54:"CLASS",55:"ID[classname]",59:"EQUAL",61:"&",62:"~",63:"!",65:"PUBLIC",66:"PRIVATE",67:"PROTECTED",68:"PAR_OPEN",69:"COLON"},
productions_: [0,[3,2],[6,3],[6,2],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,3],[6,2],[6,3],[6,3],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[32,6],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[38,1],[41,4],[41,4],[40,6],[42,6],[39,3],[60,1],[60,1],[60,1],[60,1],[60,1],[60,1],[64,1],[64,1],[64,1],[4,0],[4,2],[33,0],[33,1],[35,0],[35,2],[36,0],[36,2],[45,0],[45,1],[46,0],[46,1],[48,0],[48,1],[49,0],[49,1],[51,0],[51,1],[52,0],[52,1],[53,0],[53,2],[56,0],[56,1],[57,0],[57,1],[58,0],[58,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
this.$ = $$[$0-2] + '+' + $$[$0];
break;
case 3:
this.$ = !$$[$0];
break;
case 4:
this.$ = $$[$0-2] + '||' + $$[$0];
break;
case 5:
this.$ = $$[$0-2] && $$[$0];
break;
case 6:
this.$ = $$[$0-2] == $$[$0];
break;
case 7:
this.$ = $$[$0-2] != $$[$0];
break;
case 8:
this.$ = $$[$0-2]-$$[$0];
break;
case 9:
this.$ = $$[$0-2]*$$[$0];
break;
case 10:
this.$ = $$[$0-2]/$$[$0];
break;
case 11:
this.$ = $$[$0-2]>$$[$0];
break;
case 12:
this.$ = $$[$0-2]<$$[$0];
break;
case 13:
this.$ = $$[$0-2]>=$$[$0];
break;
case 14:
this.$ = $$[$0-2]<=$$[$0];
break;
case 15:
this.$ = Math.pow($$[$0-2], $$[$0]);
break;
case 16:
this.$ = -$$[$0];
break;
case 17:
this.$ = $$[$0-2] + ' . ' + $$[$0];
break;
case 18:
this.$ = $$[$0-1];
break;
case 19:
this.$ = $$[$0-1] / 100;
break;
case 20:
this.$ = true;
break;
case 21:
this.$ = false;
break;
case 22:
this.$ = Number(yytext);
break;
case 23:
this.$ = $$[$0];
break;
case 24:
this.$ = Math.E;
break;
case 25:
this.$ = Math.PI;
break;
case 26:
this.$ = '$' + $$[$0];
break;
case 27:

            if ($$[$0-5]) {
                this.$ = `${ $$[$0-5] } function ${ $$[$0-3] }(){ ${ $$[$0-1] } }` 
            } else {
                this.$ = `function ${ $$[$0-3] }(){ ${ $$[$0-1] } }` 
            }
        
break;
case 33:
 this.$ = `` 
break;
case 35:
 this.$ = `echo ${ $$[$0-1] } . PHP_EOL;` 
break;
case 36:
 this.$ = `echo ${ $$[$0-1] };` 
break;
case 37:
 this.$ = `if(${ $$[$0-3] }) { ${ $$[$0-1] } }` 
break;
case 38:

            if ($$[$0-2] && $$[$0-2] != '') {
                this.$ = `class ${ $$[$0-4] } extends ${ $$[$0-2] } {  ${ $$[$0-1] }  }`
            } else {
                this.$ = `class ${ $$[$0-4] } { ${ $$[$0-1] } }` 
            } 
        
break;
case 39:
 this.$ = '$' + $$[$0-2] + '=' + $$[$0] + ';' 
break;
case 49: case 55: case 69: case 75:
this.$ = [];
break;
case 50: case 56: case 70: case 76:
$$[$0-1].push($$[$0]);
break;
}
},
table: [o($V0,[2,49],{3:1,4:2}),{1:[3]},{5:[1,3],31:$V1,32:7,33:13,34:$V2,38:4,39:5,40:6,41:8,42:9,43:$V3,44:$V4,47:$V5,50:$V6,54:$V7,64:17,65:$V8,66:$V9,67:$Va},o($V0,$Vb,{1:[2,1]}),o($V0,[2,50]),o($Vc,[2,28]),o($Vc,[2,29]),o($Vc,[2,30]),o($Vc,[2,31]),o($Vc,[2,32]),o($Vc,[2,33]),{59:[1,21]},o($Vd,[2,65],{51:22,68:[1,23]}),{34:[1,24]},o($Vd,[2,57],{45:25,68:[1,26]}),o($Vd,[2,61],{48:27,68:[1,28]}),{31:[1,29]},{34:[2,52]},{34:[2,46]},{34:[2,47]},{34:[2,48]},{6:30,8:$Ve,13:$Vf,22:$Vg,25:$Vh,26:$Vi,27:$Vj,28:$Vk,29:$Vl,30:$Vm,31:$Vn},{6:41,8:$Ve,13:$Vf,22:$Vg,25:$Vh,26:$Vi,27:$Vj,28:$Vk,29:$Vl,30:$Vm,31:$Vn},o($Vd,[2,66]),{31:[1,42]},{6:43,8:$Ve,13:$Vf,22:$Vg,25:$Vh,26:$Vi,27:$Vj,28:$Vk,29:$Vl,30:$Vm,31:$Vn},o($Vd,[2,58]),{6:44,8:$Ve,13:$Vf,22:$Vg,25:$Vh,26:$Vi,27:$Vj,28:$Vk,29:$Vl,30:$Vm,31:$Vn},o($Vd,[2,62]),o($Vc,[2,71],{56:45,69:[1,46]}),o($Vc,[2,39],{7:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:$Vt,14:$Vu,15:$Vv,16:$Vw,17:$Vx,18:$Vy,19:$Vz,20:$VA,21:$VB,24:$VC}),{6:62,8:$Ve,13:$Vf,22:$Vg,25:$Vh,26:$Vi,27:$Vj,28:$Vk,29:$Vl,30:$Vm,31:$Vn},{6:63,8:$Ve,13:$Vf,22:$Vg,25:$Vh,26:$Vi,27:$Vj,28:$Vk,29:$Vl,30:$Vm,31:$Vn},{6:64,8:$Ve,13:$Vf,22:$Vg,25:$Vh,26:$Vi,27:$Vj,28:$Vk,29:$Vl,30:$Vm,31:$Vn},o($VD,[2,20]),o($VD,[2,21]),o($VD,[2,22]),o($VD,[2,23]),o($VD,[2,24]),o($VD,[2,25]),o($VD,[2,26]),o($Vc,[2,67],{52:65,7:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:$Vt,14:$Vu,15:$Vv,16:$Vw,17:$Vx,18:$Vy,19:$Vz,20:$VA,21:$VB,23:[1,66],24:$VC}),o($Vc,[2,53],{35:67,68:[1,68]}),o($Vc,[2,59],{46:69,7:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:$Vt,14:$Vu,15:$Vv,16:$Vw,17:$Vx,18:$Vy,19:$Vz,20:$VA,21:$VB,23:[1,70],24:$VC}),o($Vc,[2,63],{49:71,7:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:$Vt,14:$Vu,15:$Vv,16:$Vw,17:$Vx,18:$Vy,19:$Vz,20:$VA,21:$VB,23:[1,72],24:$VC}),o([5,34,37,43,44,47,50,54,65,66,67],[2,73],{57:73,31:[1,74]}),o($Vc,[2,72]),{6:75,8:$Ve,13:$Vf,22:$Vg,25:$Vh,26:$Vi,27:$Vj,28:$Vk,29:$Vl,30:$Vm,31:$Vn},{6:76,8:$Ve,13:$Vf,22:$Vg,25:$Vh,26:$Vi,27:$Vj,28:$Vk,29:$Vl,30:$Vm,31:$Vn},{6:77,8:$Ve,13:$Vf,22:$Vg,25:$Vh,26:$Vi,27:$Vj,28:$Vk,29:$Vl,30:$Vm,31:$Vn},{6:78,8:$Ve,13:$Vf,22:$Vg,25:$Vh,26:$Vi,27:$Vj,28:$Vk,29:$Vl,30:$Vm,31:$Vn},{6:79,8:$Ve,13:$Vf,22:$Vg,25:$Vh,26:$Vi,27:$Vj,28:$Vk,29:$Vl,30:$Vm,31:$Vn},{6:80,8:$Ve,13:$Vf,22:$Vg,25:$Vh,26:$Vi,27:$Vj,28:$Vk,29:$Vl,30:$Vm,31:$Vn},{6:81,8:$Ve,13:$Vf,22:$Vg,25:$Vh,26:$Vi,27:$Vj,28:$Vk,29:$Vl,30:$Vm,31:$Vn},{6:82,8:$Ve,13:$Vf,22:$Vg,25:$Vh,26:$Vi,27:$Vj,28:$Vk,29:$Vl,30:$Vm,31:$Vn},{6:83,8:$Ve,13:$Vf,22:$Vg,25:$Vh,26:$Vi,27:$Vj,28:$Vk,29:$Vl,30:$Vm,31:$Vn},{6:84,8:$Ve,13:$Vf,22:$Vg,25:$Vh,26:$Vi,27:$Vj,28:$Vk,29:$Vl,30:$Vm,31:$Vn},{6:85,8:$Ve,13:$Vf,22:$Vg,25:$Vh,26:$Vi,27:$Vj,28:$Vk,29:$Vl,30:$Vm,31:$Vn},{6:86,8:$Ve,13:$Vf,22:$Vg,25:$Vh,26:$Vi,27:$Vj,28:$Vk,29:$Vl,30:$Vm,31:$Vn},{6:87,8:$Ve,13:$Vf,22:$Vg,25:$Vh,26:$Vi,27:$Vj,28:$Vk,29:$Vl,30:$Vm,31:$Vn},{6:88,8:$Ve,13:$Vf,22:$Vg,25:$Vh,26:$Vi,27:$Vj,28:$Vk,29:$Vl,30:$Vm,31:$Vn},o($VD,[2,19]),o($VE,[2,3],{9:$Vp,10:$Vq,11:$Vr,12:$Vs,21:$VB}),o($VF,[2,16],{21:$VB}),{7:$Vo,9:$Vp,10:$Vq,11:$Vr,12:$Vs,13:$Vt,14:$Vu,15:$Vv,16:$Vw,17:$Vx,18:$Vy,19:$Vz,20:$VA,21:$VB,23:[1,89],24:$VC},o($Vc,[2,69],{53:90}),o($Vc,[2,68]),o($Vc,[2,55],{36:91}),{23:[1,92]},o($Vc,[2,35]),o($Vc,[2,60]),o($Vc,[2,36]),o($Vc,[2,64]),o($Vc,[2,75],{58:93}),o($Vc,[2,74]),o($VG,[2,2],{9:$Vp,10:$Vq,11:$Vr,12:$Vs,14:$Vu,15:$Vv,16:$Vw,17:$Vx,18:$Vy,19:$Vz,20:$VA,21:$VB}),o($VH,[2,4],{11:$Vr,12:$Vs,21:$VB}),o($VH,[2,5],{11:$Vr,12:$Vs,21:$VB}),o($VF,[2,6],{21:$VB}),o($VF,[2,7],{21:$VB}),o($VG,[2,8],{9:$Vp,10:$Vq,11:$Vr,12:$Vs,14:$Vu,15:$Vv,16:$Vw,17:$Vx,18:$Vy,19:$Vz,20:$VA,21:$VB}),o($VI,[2,9],{9:$Vp,10:$Vq,11:$Vr,12:$Vs,16:$Vw,17:$Vx,18:$Vy,19:$Vz,20:$VA,21:$VB}),o($VI,[2,10],{9:$Vp,10:$Vq,11:$Vr,12:$Vs,16:$Vw,17:$Vx,18:$Vy,19:$Vz,20:$VA,21:$VB}),o($VE,[2,11],{9:$Vp,10:$Vq,11:$Vr,12:$Vs,21:$VB}),o($VE,[2,12],{9:$Vp,10:$Vq,11:$Vr,12:$Vs,21:$VB}),o($VE,[2,13],{9:$Vp,10:$Vq,11:$Vr,12:$Vs,21:$VB}),o($VE,[2,14],{9:$Vp,10:$Vq,11:$Vr,12:$Vs,21:$VB}),o([5,7,13,14,15,20,23,24,31,34,37,43,44,47,50,54,65,66,67],[2,15],{9:$Vp,10:$Vq,11:$Vr,12:$Vs,16:$Vw,17:$Vx,18:$Vy,19:$Vz,21:$VB}),o($VD,[2,17]),o($VD,[2,18]),{5:$VJ,31:$V1,32:7,33:13,34:$V2,37:[1,94],38:95,39:5,40:6,41:8,42:9,43:$V3,44:$V4,47:$V5,50:$V6,54:$V7,64:17,65:$V8,66:$V9,67:$Va},{5:$VJ,31:$V1,32:7,33:13,34:$V2,37:[1,97],38:98,39:5,40:6,41:8,42:9,43:$V3,44:$V4,47:$V5,50:$V6,54:$V7,64:17,65:$V8,66:$V9,67:$Va},o($Vc,[2,54]),{5:$VJ,31:$V1,32:7,33:13,34:$V2,37:[1,99],38:100,39:5,40:6,41:8,42:9,43:$V3,44:$V4,47:$V5,50:$V6,54:$V7,64:17,65:$V8,66:$V9,67:$Va},o($Vc,[2,37]),o($Vc,[2,70]),o($Vc,$Vb),o($Vc,[2,27]),o($Vc,[2,56]),o($Vc,[2,38]),o($Vc,[2,76])],
defaultActions: {17:[2,52],18:[2,46],19:[2,47],20:[2,48]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 43
break;
case 2:return 27
break;
case 3:return 25
break;
case 4:return 26
break;
case 5:return 54
break;
case 6:return 69
break;
case 7:return 'HASH'
break;
case 8:return 'QUESTION'
break;
case 9:return 'TILDE'
break;
case 10:return 'UNDERSCORE'    
break;
case 11:return 34
break;
case 12:return 37
break;
case 13:return 8
break;
case 14:return 10
break;
case 15:return 9
break;
case 16:return 65
break;
case 17:return 66
break;
case 18:return 67
break;
case 19:return 44
break;
case 20:return 47
break;
case 21:return 50
break;
case 22:return 31
break;
case 23:return 24
break;
case 24:return 59
break;
case 25:return 11
break;
case 26:return 14
break;
case 27:return 15
break;
case 28:return 13
break;
case 29:return 7
break;
case 30:return 16
break;
case 31:return 17
break;
case 32:return 18
break;
case 33:return 19
break;
case 34:return 20
break;
case 35:return 68
break;
case 36:return 23
break;
case 37:return 30
break;
case 38:return 29
break;
case 39:return 'SEMICOL'
break;
case 40:return 21
break;
case 41:return 28
break;
case 42:return 5
break;
case 43:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\*[\s\S]*?\*\/|\/\/.*)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:class\b)/,/^(?::)/,/^(?:#)/,/^(?:\?)/,/^(?:~)/,/^(?:_\b)/,/^(?:def\b)/,/^(?:end\b)/,/^(?:not\b)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:public\b)/,/^(?:private\b)/,/^(?:protected\b)/,/^(?:println\b)/,/^(?:print\b)/,/^(?:if\b)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:%)/,/^(?:=)/,/^(?:!=)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:>)/,/^(?:<)/,/^(?:>=)/,/^(?:<=)/,/^(?:\^)/,/^(?:\()/,/^(?:\))/,/^(?:PI\b)/,/^(?:E\b)/,/^(?:;)/,/^(?:\.)/,/^(?:"(?:""|[^"])*")/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}